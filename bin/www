#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var io = require('socket.io');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var ws = io.listen(server);

// 检查昵称是否重复
var checkNickname = function(name){
  for(var k in ws.sockets.sockets){
      if(ws.sockets.sockets.hasOwnProperty(k)){
          if(ws.sockets.sockets[k] && ws.sockets.sockets[k].nickname == name){
              return true;
          }
      }
  }
  return false;
}
// 获取所有的昵称数组
var getAllNickname = function(){
  var result = [];
  for(var k in ws.sockets.sockets){
      if(ws.sockets.sockets.hasOwnProperty(k)){
          result.push({
              name: ws.sockets.sockets[k].nickname,
              id: ws.sockets.sockets[k].id
          });
      }
  }
  return result;
}
ws.on('connection', function(client){
  console.log('\033[96msomeone is connect\033[39m \n');

  client.on('join', function(msg){

      // 检查是否有重复
      if(checkNickname(msg)){
          client.emit('nickname', '昵称有重复!');
      }else{
          client.nickname = msg;
          ws.sockets.emit('announcement', '系统', msg + ' 加入了聊天室!', {type:'join', name:getAllNickname()});
      }
      client.emit('alluser',getAllNickname());  // 通过消息广播链接的用户昵称
  });
  client.on('getuser', function(){    //接受客户端发送消息 ， 发送终端 ，终端识别显示需要的。
    client.emit('alluser',getAllNickname());  // 通过消息广播链接的用户昵称
    });
  // 监听发送消息
  client.on('send.message', function(id,msg){   //接受终端发送的消息 ， 终端消息分发用户
    console.log(id)
      client.broadcast.to(id).emit('server',client.nickname,  msg);
  });
  client.on('server', function(msg){    //接受客户端发送消息 ， 发送终端 ，终端识别显示需要的。
    client.broadcast.emit('send.message',client.nickname, msg ,client.id);
});

  client.on('disconnect', function(){
      if(client.nickname){
          client.broadcast.emit('send.message','系统',  client.nickname + '离开聊天室!', {type:'disconnect', name:client.nickname});
      }
  })

})

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = ws;